Command: python3 produce_chains.py -w 0.2 -c 12 -i 50000 -su 100 -dc 50
Time for MCMC part: 2199.548 seconds
Total accepted points: [3302. 2956. 2824. 3081. 3034. 3041. 2791. 3140. 2656. 3021. 2809. 3477.]
% of points accepted:  [6.61, 5.91, 5.65, 6.16, 6.07, 6.08, 5.58, 6.28, 5.31, 6.04, 5.62, 6.96]

old_params = np.array([
        [0.54140358, 0.13149972, 0.00598758, 0.03567882],
        [0.62056374, 0.32521612, 0.00383365, 0.02776486],
        [0.50364449, 0.2484926,  0.00437766, 0.01872969],
        [0.58273778, 0.14288327, 0.00206878, 0.04298201],
        [0.5602775,  0.13778219, 0.00351717, 0.04579717],
        [0.45796704, 0.1823534,  0.0057593,  0.02847193],
        [0.60673191, 0.0960284,  0.00263594, 0.04629464],
        [0.588233,   0.21766912, 0.00583657, 0.02215294],
        [0.55503841, 0.13809003, 0.00243709, 0.01321314],
        [0.44171813, 0.12828916, 0.0017755,  0.02651028],
        [0.35932839, 0.31077598, 0.00479538, 0.03890411],
        [0.93309666, 0.25958963, 0.00521199, 0.04290222]
    ])

Averaged (over all chains), this method was 87.4% faster than without adaptive learning, i.e.
it obtained 87.4% more accepted steps in the same unit of time as the one without adaptive learning.

ratios = [2.04464459, 1.81856464, 1.78347106, 1.96402276, 1.93018355, 1.7854514 , 1.73499917, \
 2.02743431, 1.64142853, 1.80942862, 1.74163838, 2.20317698]
